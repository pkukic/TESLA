// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ['/home/patrik/.miniconda/envs/tesla_env/include',
//                                   '/home/patrik/.miniconda/envs/tesla_env/include/e
//                                  igen3', '/home/patrik/.miniconda/envs/tesla_env/in
//                                  clude']
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   False
//  format:                         'ufc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  no-evaluate_basis_derivatives:  True
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#include "ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5.h"

// Based on https://gcc.gnu.org/wiki/Visibility
#if defined _WIN32 || defined __CYGWIN__
    #ifdef __GNUC__
        #define DLL_EXPORT __attribute__ ((dllexport))
    #else
        #define DLL_EXPORT __declspec(dllexport)
    #endif
#else
    #define DLL_EXPORT __attribute__ ((visibility ("default")))
#endif

ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_cell_integral_main_otherwise::ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_cell_integral_main_otherwise() : ufc::cell_integral()
{

}

ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_cell_integral_main_otherwise::~ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_cell_integral_main_otherwise()
{

}

const std::vector<bool> & ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_cell_integral_main_otherwise::enabled_coefficients() const
{
static const std::vector<bool> enabled({true});
return enabled;
}

void ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_cell_integral_main_otherwise::tabulate_tensor(double * A,
                                    const double * const * w,
                                    const double * coordinate_dofs,
                                    int cell_orientation) const
{
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 3
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 3
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           3
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights6[6] = { 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333, 0.08333333333333333 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE10_C0_D01_Q6[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE1_C0_D01_Q6[1][6][5] =
        { { { 0.5638439637084871, -0.07226652578787474, 2.636110489496353, -0.4915774379206053, -2.636110489496369 },
            { 0.07226652578787129, -0.5638439637084912, 2.636110489496354, 0.4915774379206269, -2.636110489496369 },
            { 0.5638439637084867, 1.63611048949637, 0.9277334742121086, -2.19995445320485, -0.9277334742121235 },
            { -1.636110489496372, -0.5638439637084912, 0.9277334742121131, 2.199954453204868, -0.9277334742121239 },
            { 0.07226652578787046, 1.63611048949637, 0.4361560362914931, -1.708377015284234, -0.4361560362915067 },
            { -1.636110489496372, -0.07226652578787474, 0.4361560362914966, 1.708377015284251, -0.436156036291507 } } };
    alignas(32) static const double FE1_C0_D10_Q6[1][6][5] =
        { { { 0.563843963708494, 1.636110489496368, 0.9277334742121222, -0.9277334742121222, -2.199954453204862 },
            { 0.07226652578787801, 1.636110489496367, 0.4361560362915065, -0.4361560362915065, -1.708377015284245 },
            { 0.563843963708492, -0.07226652578787596, 2.636110489496363, -2.636110489496363, -0.4915774379206163 },
            { -1.636110489496367, -0.07226652578787784, 0.4361560362915067, -0.4361560362915067, 1.708377015284245 },
            { 0.07226652578787518, -0.5638439637084931, 2.636110489496363, -2.636110489496363, 0.4915774379206174 },
            { -1.636110489496368, -0.5638439637084938, 0.9277334742121222, -0.9277334742121222, 2.199954453204862 } } };
    alignas(32) static const double FE1_C0_Q6[1][6][6] =
        { { { -0.08525999807368706, 0.2096071917300055, -0.1243471936563187, 0.6114019857068719, 0.1011591387118274, 0.2874388755813005 },
            { -0.1243471936563187, 0.2096071917300055, -0.08525999807368706, 0.2874388755813005, 0.1011591387118274, 0.611401985706872 },
            { -0.08525999807368705, -0.1243471936563188, 0.2096071917300057, 0.6114019857068719, 0.2874388755813006, 0.1011591387118274 },
            { 0.2096071917300056, -0.1243471936563187, -0.08525999807368706, 0.1011591387118275, 0.2874388755813005, 0.611401985706872 },
            { -0.1243471936563187, -0.08525999807368706, 0.2096071917300057, 0.2874388755813005, 0.611401985706872, 0.1011591387118274 },
            { 0.2096071917300057, -0.08525999807368706, -0.1243471936563187, 0.1011591387118274, 0.6114019857068719, 0.2874388755813005 } } };
    // Unstructured piecewise computations
    const double J_c0 = coordinate_dofs[0] * FE10_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE10_C0_D01_Q6[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE10_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE10_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE10_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE10_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE10_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE10_C0_D01_Q6[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE10_C0_D01_Q6[0][0][0] + coordinate_dofs[2] * FE10_C0_D01_Q6[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE10_C0_D01_Q6[0][0][0] + coordinate_dofs[5] * FE10_C0_D01_Q6[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE10_C0_D01_Q6[0][0][0] + coordinate_dofs[4] * FE10_C0_D01_Q6[0][0][1];
    const double J_c2 = coordinate_dofs[1] * FE10_C0_D01_Q6[0][0][0] + coordinate_dofs[3] * FE10_C0_D01_Q6[0][0][1];
    alignas(32) double sp[11];
    sp[0] = J_c0 * J_c3;
    sp[1] = J_c1 * J_c2;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 / sp[2];
    sp[4] = -1 * J_c1 / sp[2];
    sp[5] = J_c3 / sp[2];
    sp[6] = -1 * J_c2 / sp[2];
    sp[7] = J_c0 * J_c3;
    sp[8] = J_c1 * J_c2;
    sp[9] = sp[7] + -1 * sp[8];
    sp[10] = std::abs(sp[9]);
    alignas(32) double BF0[6] = {};
    alignas(32) double BF1[6] = {};
    for (int iq = 0; iq < 6; ++iq)
    {
        // Quadrature loop body setup (num_points=6)
        // Unstructured varying computations for num_points=6
        const double w0_d1 = w[0][0] * FE1_C0_D01_Q6[0][iq][0] + w[0][2] * FE1_C0_D01_Q6[0][iq][1] + w[0][3] * FE1_C0_D01_Q6[0][iq][2] + w[0][4] * FE1_C0_D01_Q6[0][iq][3] + w[0][5] * FE1_C0_D01_Q6[0][iq][4];
        const double w0_d0 = w[0][0] * FE1_C0_D10_Q6[0][iq][0] + w[0][1] * FE1_C0_D10_Q6[0][iq][1] + w[0][3] * FE1_C0_D10_Q6[0][iq][2] + w[0][4] * FE1_C0_D10_Q6[0][iq][3] + w[0][5] * FE1_C0_D10_Q6[0][iq][4];
        alignas(32) double sv6[8];
        sv6[0] = w0_d1 * sp[3];
        sv6[1] = w0_d0 * sp[4];
        sv6[2] = sv6[0] + sv6[1];
        sv6[3] = w0_d0 * sp[5];
        sv6[4] = w0_d1 * sp[6];
        sv6[5] = sv6[3] + sv6[4];
        sv6[6] = sv6[2] * sp[10];
        sv6[7] = sv6[5] * sp[10];
        const double fw0 = sv6[7] * weights6[iq];
        for (int i = 0; i < 6; ++i)
            BF0[i] += fw0 * FE1_C0_Q6[0][iq][i];
        const double fw1 = sv6[6] * weights6[iq];
        for (int i = 0; i < 6; ++i)
            BF1[i] += fw1 * FE1_C0_Q6[0][iq][i];
    }
    std::fill(A, A + 12, 0.0);
    for (int i = 0; i < 6; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 6; ++i)
        A[i + 6] += BF1[i];
}

extern "C" DLL_EXPORT ufc::cell_integral * create_ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_cell_integral_main_otherwise()
{
  return new ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_cell_integral_main_otherwise();
}


ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main() : ufc::form()
{
    // Do nothing
}

ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::~ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main()
{
    // Do nothing
}

const char * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::signature() const
{
    return "50549c13822350b30e8d95b8ca5ad87ce8c57f7bdd4fe3bccdf6758186f13de74ad82ab1db20400379e9c0c72f0663476468daf8ae8ca43ecde7dc23c27352d4";
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::rank() const
{
    return 1;
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::num_coefficients() const
{
    return 1;
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::original_coefficient_position(std::size_t i) const
{
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
}

ufc::finite_element * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_coordinate_finite_element() const
{
    return create_ffc_element_d57c7b3eacee821f2221d1dbe19f1d34d409d1d1_finite_element_main();
}

ufc::dofmap * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_coordinate_dofmap() const
{
    return create_ffc_element_d57c7b3eacee821f2221d1dbe19f1d34d409d1d1_dofmap_main();
}

ufc::coordinate_mapping * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_coordinate_mapping() const
{
    return create_ffc_coordinate_mapping_e8dded29787ba508cc389d1bda773a92d093fd87_coordinate_mapping_main();
}

ufc::finite_element * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_9e93e8458749b5a8e8b5e04f20d62c4264f3280d_finite_element_main();
    case 1:
        return create_ffc_element_6087298471dc8d2bf60dd8285ad48cf9b8746019_finite_element_main();
    default:
        return nullptr;
    }
}

ufc::dofmap * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
        return create_ffc_element_9e93e8458749b5a8e8b5e04f20d62c4264f3280d_dofmap_main();
    case 1:
        return create_ffc_element_6087298471dc8d2bf60dd8285ad48cf9b8746019_dofmap_main();
    default:
        return nullptr;
    }
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::max_cell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::max_exterior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::max_interior_facet_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::max_vertex_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::max_custom_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::max_cutcell_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::max_interface_subdomain_id() const
{
    return 0;
}

std::size_t ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::max_overlap_subdomain_id() const
{
    return 0;
}

bool ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::has_cell_integrals() const
{
    return true;
}

bool ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::has_exterior_facet_integrals() const
{
    return false;
}

bool ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::has_interior_facet_integrals() const
{
    return false;
}

bool ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::has_vertex_integrals() const
{
    return false;
}

bool ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::has_custom_integrals() const
{
    return false;
}

bool ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::has_cutcell_integrals() const
{
    return false;
}

bool ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::has_interface_integrals() const
{
    return false;
}

bool ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::has_overlap_integrals() const
{
    return false;
}

ufc::cell_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_cell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::exterior_facet_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_exterior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_interior_facet_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_vertex_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_custom_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_cutcell_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_interface_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_overlap_integral(std::size_t subdomain_id) const
{
    return nullptr;
}

ufc::cell_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_default_cell_integral() const
{
    return create_ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_cell_integral_main_otherwise();
}

ufc::exterior_facet_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_default_exterior_facet_integral() const
{
    return nullptr;
}

ufc::interior_facet_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_default_interior_facet_integral() const
{
    return nullptr;
}

ufc::vertex_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_default_vertex_integral() const
{
    return nullptr;
}

ufc::custom_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_default_custom_integral() const
{
    return nullptr;
}

ufc::cutcell_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_default_cutcell_integral() const
{
    return nullptr;
}

ufc::interface_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_default_interface_integral() const
{
    return nullptr;
}

ufc::overlap_integral * ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main::create_default_overlap_integral() const
{
    return nullptr;
}

extern "C" DLL_EXPORT ufc::form * create_ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main()
{
  return new ffc_form_21bac23b528bd6d6af9ee80cd573f169a4975ab5_form_main();
}

